(ns pr4.devcards
  (:require
    [devcards.core :as devcards :refer-macros [defcard deftest defcard-rg]]
    [reagent.core :as reagent]
    [pr4.periodization :as periodization]
    [button :as material-Button]
    [slider :as material-slider]
    [select :as material-select]
    [menu-item :as material-menu-item]
    [form-control-label :as material-form-control-label]
    [checkbox :as material-checkbox]
    [expand-more :as material-icons-ExpandMore]
    [expand-less :as material-icons-ExpandLess]
    [search :as material-icons-search]
    [chevron-left]
    [chevron-right]
    [google-charts]
    [tick.alpha.api :as tick]
    [re-frame.core :as re-frame]
    [pr4.app-state :as app-state]
    [pr4.events :as events]
    [pr4.util :as util]
    ))

(devcards.core/start-devcard-ui!)

(defonce init-app-state
  (do
    (re-frame/clear-subscription-cache!)
    (re-frame/dispatch-sync [::events/initialize-app-state])))

;; Clean default html page generated by figwheel.
;; (reagent/render [:div] (js/document.getElementById "app-cards"))

(defcard
  (str "# Periodiza")
  {}
  {:frame false
   :heading false})

(defonce devcards-hidden (reagent/atom []))

(defcard-rg hidding-cards
  (let [card-container-style #js {:display "flex"
                                  :justifyContent "space-evenly"
                                  :padding "20px 0"}]
    (fn [devcard-data _]
      [:div.card-container
       {:style card-container-style}
       [:> material-Button
        {:variant "outlined"
         :size "small"
         :color "secondary"
         :onClick #(doseq [hidden-atom @devcards-hidden]
                     (reset! hidden-atom true))}
        "hide all"]
       [:> material-Button
        {:variant "outlined"
         :size "small"
         :color "secondary"
         :onClick #(doseq [hidden-atom @devcards-hidden]
                     (reset! hidden-atom false))}
        "show all"]]))
  {}
  {:frame false})

;; TODO: use column role interval in volume and intensity
(defn sessions->chart-data [sessions selection]
  (let [row-fn (fn [index {:keys [total-sets reps-max]}]
                 #js [(str "Sessão " (inc index))
                      (periodization/session-volume reps-max total-sets)
                      (str "color: " (if (util/between? index selection) "#3bbcb7" "#b3e5e3"))
                      (periodization/reps-to-intensity reps-max)
                      (str "color: " (if (util/between? index selection) "#ffd237" "#ffe99c"))])]
    (->> sessions
         (map-indexed row-fn)
         (cons #js ["Sessão"
                    "Volume"
                    #js {:role "style"}
                    "Intensidade"
                    #js {:role "style"}])
         into-array)))

(defn microciclos->ranged-micros
  "Output example:
    ([0 2] [3 5] [6 8] [9 11] [12 14] [15 17] [18 20] [21 23] [24 26] [27 29] [30 31])"
  [micros]
  (map (fn [first last] [first last]) (into [0] micros) micros))

(defn micro-chart-data [sessions [selection-f selection-l] micros]
  (let [summed-volumes (fn [sessions]
                         (->> sessions
                              (map #(into [(% :reps-max) (% :total-sets)]))
                              (map #(apply periodization/session-volume %))
                              (reduce +)))
        avg-intensity (fn [sessions]
                        (->> sessions
                             (map :reps-max)
                             (map periodization/reps-to-intensity)
                             (reduce +)
                             (#(/ % (count sessions)))))
        row-fn (fn [index micro-range]
                 #js [(str "Micro " (inc index))
                      (summed-volumes (util/select-indexes sessions micro-range))
                      (str "color: " (if (= micro-range [selection-f (dec selection-l)])
                                       "#3bbc8e" #_"#3b3fbc"
                                       "#74deb8" #_"#b3b4e5"))
                      (avg-intensity (util/select-indexes sessions micro-range))
                      (str "color: " (if (= micro-range [selection-f (dec selection-l)])
                                       "#ffbd38" #_"#f5ff37"
                                       "#ffcf70" #_"#faff9c"))])]
    (->> micros
         microciclos->ranged-micros
         (map-indexed row-fn)
         (cons #js ["Micro"
                    "Volume do Micro"
                    #js {:role "style"}
                    "Intensidade"
                    #js {:role "style"}])
         into-array)))

(defn reps->intensity-text [min max]
  (if (= min max)
    (str (Math.round (periodization/reps-to-intensity min)) "%")
    (str (Math.round (periodization/reps-to-intensity max)) "-"
         (Math.round (periodization/reps-to-intensity min)) "%")))

(defn reps->reps-zone [min max]
  (if (= min max)
    (str min "RM")
    (str min "-" max "RM")))

(defn draw-chart [element-id data-array chart-width options]
  #(let [g-charts-instance (new google-charts)
         el (-> js/document (.getElementById element-id))
         data (fn [] (-> g-charts-instance .-api .-visualization
                  (.arrayToDataTable data-array)))
         chart (fn []
                 (set! (-> el .-style .-width)
                       (-> js/document
                           (.getElementsByClassName "com-rigsomelight-devcard")
                           (.item 0)
                           .-clientWidth
                           (* chart-width)
                           (str "px")))
                 (new (-> g-charts-instance .-api
                               .-visualization .-ColumnChart) el))
         draw-fn (fn [] (-> (chart) (.draw (data) options)))]
     (-> g-charts-instance (.load draw-fn))))

(def normal-chart-options #js {:theme "maximized"
                  :legend #js {:position "none"}
                  :series #js {"0" #js {:targetAxisIndex 0}
                               "1" #js {:targetAxisIndex 1}}
                  :bar #js {:groupWidth "70%"}
                  :vAxes #js [#js {:minValue 2500 :maxValue 35000 :viewWindowMode "maximized"}
                              #js {:minValue 40 :maxValue 100 :viewWindowMode "maximized"}]})

(defn session-component
  "Show last session, but edit all the selected range."
  [{:keys [selected-sessions]}]
  (let [{:keys [reps-min reps-max total-sets rest-time] :as session}
          (last selected-sessions)]
    [:div
     [:h3 "Intensidade: " (reps->intensity-text
                            reps-min
                            reps-max)]
     [:h3 "Repetições: " (reps->reps-zone
                           reps-min
                           reps-max)
      " "
      [:> material-Button
       {:variant "outlined"
        :size "small"
        :color "secondary"
        :onClick #(re-frame/dispatch [::events/decrease-reps-range])}
       [:> chevron-left]]
      [:> material-Button
       {:variant "outlined"
        :size "small"
        :color "secondary"
        :onClick #(re-frame/dispatch [::events/increase-reps-range])}
       [:> chevron-right]]]
     [:> material-slider
      {:min 1
       :max 30
       :value reps-min
       :marks [{:value 1 :label "1RM"}
               {:value 3 :label "3RM"}
               {:value 5 :label "5RM"}
               {:value 8 :label "8RM"}
               {:value 10 :label "10RM"}
               {:value 15 :label "15RM"}
               {:value 20 :label "20RM"}
               {:value 30 :label "30RM"}]
       :onChange #(re-frame/dispatch [::events/reps-slider-change %2])}]
     [:h3 "Séries: "
      [:input {:type "number"
               :min 1
               :max 99
               :value total-sets
               :onChange #(re-frame/dispatch [::events/total-sets-changed
                                              (-> % .-target .-value)])}]]
     [:h3 "Descanso por série: "
      (util/seconds->minute-text rest-time)]
     [:> material-slider
      {:value rest-time
       :onChange #(re-frame/dispatch [::events/rest-slider-changed %2])
       :marks [{:value 0 :label "0"}
               {:value 60 :label "1:00"}
               {:value 120 :label "2:00"}
               {:value 180 :label "3:00"}
               {:value 240 :label "4:00"}
               {:value 300 :label "5:00"}]
       :min 0
       :max 300
       :step 15}]
     [:h3 "Volume total (Intens. x Rep. x Séries): "
      (periodization/session->total-volume session)]
     [:h3 "Tempo estimado da sessão: "
      (-> session periodization/session->time-estimate
          (util/round-to-precision 300) util/seconds->minute-text)]
     [:h3 "Relação [Execução Descanso]: "
      (str "["
           (Math.round (* 100 (/ (periodization/execution-time reps-max
                                                               total-sets)
                                 (periodization/session->time-estimate session))))
           "% "
           (Math.round (* 100 (/ (periodization/total-rest-time total-sets
                                                                rest-time)
                                 (periodization/session->time-estimate session))))
           "%]")]]))

(defcard-rg Sessão
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"
                     :paddingBottom 20}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          "Sessão " (let [[selection-start selection-end] @(re-frame/subscribe [::app-state/session-selection])]
                      (str (inc selection-start) "-" selection-end))
          " "
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :color "secondary"
            :onClick #(re-frame/dispatch [::events/decrease-selected-range])}
           [:> chevron-left]]
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :color "secondary"
            :onClick #(re-frame/dispatch [::events/increase-selected-range])}
           [:> chevron-right]]]
         [:> material-slider
          {:min 0
           :max (count @(re-frame/subscribe [::app-state/sessions]))
           :value (first @(re-frame/subscribe [::app-state/session-selection]))
           :onChange #(re-frame/dispatch [::events/session-sel-slider-changed %2])}]
         [:div
          {:style #js {:display "flex"
                       :justifyContent "center"}}
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/delete-selected-sessions])}
           "Excluir"]
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/duplicate-selected-sessions])}
           "Duplicar"]
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-sessions-left])
            }
           [:> chevron-left]
           "Mover"]
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-sessions-right])
            }
           "Mover"
           [:> chevron-right]]]
         [:div [:div#chart-div
                {:style #js {:paddingTop "20px" :height 200}}]]
         ;; Hack to be able to run the draw-chart fn
         ;; do not use it in production, use the event DOMContentLoaded instead
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "chart-div"
                                     (sessions->chart-data @(re-frame/subscribe [::app-state/sessions])
                                                           @(re-frame/subscribe [::app-state/session-selection]))
                                     0.9
                                     normal-chart-options)}]
         [session-component
          {:selected-sessions (util/select-indexes @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::app-state/session-selection]))}]]]]))
  {:hidden? (reagent/atom false)})

;; (clojure.set/map-invert models)
;; We can change how sessions and models are compared, so models with different
;; attributes can be defined, e.g. a model setting total-sets and rest-time
;; and another setting reps-min and reps-max.
(defn micro-name [sessions-atoms models]
  (let [sessions (->> sessions-atoms
                      (map #(select-keys % [:reps-min :reps-max :rest-time]))
                      vec)]
    (or (models sessions)
        "Custom.")))

(defn models-names [models]
  (vec (set (vals periodization/micros-models))))

(defcard-rg Microciclo
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"
                     :paddingBottom 20}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          "Microciclo " (let [[session-sel-start session-sel-end] @(re-frame/subscribe [::app-state/session-selection])
                              micro-sel-start (@(re-frame/subscribe [::app-state/idx-micros]) session-sel-start)
                              micro-sel-end (@(re-frame/subscribe [::app-state/idx-micros]) session-sel-end)]
                          (str (when micro-sel-start (inc micro-sel-start)) "-" micro-sel-end))
          " "
          #_[:> material-Button
           {:variant "outlined"
            :size "small"
            :color "secondary"
            :onClick decrease-selected-range}
           [:> chevron-left]]
          #_[:> material-Button
           {:variant "outlined"
            :size "small"
            :color "secondary"
            :onClick increase-selected-range}
           [:> chevron-right]]]
         [:> material-slider
          {:min 0
           :max (count @(re-frame/subscribe [::app-state/microcycles]))
           :value (@(re-frame/subscribe [::app-state/idx-micros])
                    (first @(re-frame/subscribe [::app-state/session-selection])))
           :onChange #(re-frame/dispatch [::events/microcycles-sel-slider-changed %2])}]
         [:div
          {:style #js {:display "flex"}}
          [:div#micro-chart
           {:style #js {:padding "10px" :height 200}}]
          [:div#micro-sessions-chart
           {:style #js {:padding "10px" :height 200}}]
          ]
         ;; Hack to be able to run the draw-chart fn
         ;; do not use it in production, use the event DOMContentLoaded instead
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "micro-chart"
                                     (micro-chart-data @(re-frame/subscribe [::app-state/sessions])
                                                       @(re-frame/subscribe [::app-state/session-selection])
                                                       @(re-frame/subscribe [::app-state/microcycles]))
                                     0.45
                                     normal-chart-options)}]
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "micro-sessions-chart"
                                     (if (and (@(re-frame/subscribe [::app-state/idx-micros]) (first @(re-frame/subscribe [::app-state/session-selection])))
                                              (@(re-frame/subscribe [::app-state/idx-micros]) (second @(re-frame/subscribe [::app-state/session-selection]))))
                                       (sessions->chart-data (util/select-indexes @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::app-state/session-selection]))
                                                             [0 (count @(re-frame/subscribe [::app-state/sessions]))])
                                       #js [#js ["Sessão" "Volume" "Intensidade" ] #js ["1" 0 0]])
                                     0.45
                                     normal-chart-options)}]
         [:div ;; div to center the select
          {:style #js {:display "flex"
                       :justifyContent "space-evenly"}}
          [:> material-select
           {:value (micro-name (util/select-indexes @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::app-state/session-selection]))
                               periodization/micros-models)
            :onChange #(re-frame/dispatch [::events/update-sessions-by-model
                                           (-> % .-target .-value)])}
           (map #(with-meta
                   [:> material-menu-item {:value %} %]
                   {:key %})
                (models-names periodization/micros-models))
           [:> material-menu-item {:value "Custom." :disabled true} "Custom."]]]]]]))
  {:hidden? (reagent/atom false)})

(defn date-dd-mm [date]
  (let [dd (tick/day-of-month date)
        MM (tick/int (tick/month date))]
    (str dd "/" MM)))

(defn date-str [date]
  (let [dd (tick/day-of-month date)
        MM (tick/int (tick/month date))
        yyyy (tick/int (tick/year date))
        day (tick/day-of-week date)
        pt-week {tick/MONDAY "Segunda"
                 tick/TUESDAY "Terça"
                 tick/WEDNESDAY "Quarta"
                 tick/THURSDAY "Quinta"
                 tick/FRIDAY "Sexta"
                 tick/SATURDAY "Sábado"
                 tick/SUNDAY "Domingo"}]
    (str dd "/" MM "/" yyyy
         " (" (clojure.string/join (take 3 (pt-week day))) ")")))

(def calendar-chart-options
  #js {:chartArea #js {:width "100%"}
       :legend #js {:position "none"}
       :series #js {"0" #js {:targetAxisIndex 0}
                    "1" #js {:targetAxisIndex 1}}
       :bar #js {:groupWidth "100%"}
       :vAxes #js [#js {:textPosition "none" #_:minValue #_2500
                        :maxValue 35000 :viewWindowMode "maximized"}
                   #js {:textPosition "none" #_:minValue #_5000
                        #_:maxValue #_70000 :viewWindowMode "maximized"}]})

(defonce chart-zoom (reagent/atom 30))

(defn calendar-chart-data [calendar sessions]
  (let [session-idx->volume (fn [session-idx]
                              (when session-idx
                                (->> session-idx
                                   (nth sessions)
                                   (#(into [(% :reps-max) (% :total-sets)]))
                                   (apply periodization/session-volume))))
        zoom-in @chart-zoom
        all-days-without-week-vol (map-indexed #(assoc %2 :idx %1) calendar)

        first-week (take-while
                     #(not= (tick/day-of-week (:date %)) tick/SUNDAY)
                     all-days-without-week-vol)
        add-week-vol (fn [week]
                       (->> week
                            (map :session-idx)
                            (map session-idx->volume)
                            (reduce +)
                            (assoc-in (vec week) [(dec (count week)) :week-volume])))
        all-days (as-> all-days-without-week-vol $
                   (drop (count first-week) $)
                   (partition-all 7 $)
                   (map #(if (not= 7 (count %))
                           %
                           (add-week-vol %))
                        $)
                   (flatten (cons  (add-week-vol first-week) $)))

        shift (- (/ (apply + @(re-frame/subscribe [::app-state/calendar-selection])) 2) (/ (count all-days) 2))
        to-drop (-> all-days count (- zoom-in) (/ 2))
        r (drop (+ to-drop shift) all-days)
        some-days (take zoom-in r)
        on-saturday (fn [date if-true if-false]
                      (if (= (tick/day-of-week date) tick/SATURDAY)
                        if-true
                        if-false))
        row-fn (fn [{:keys [date session-idx absent? week-volume idx]}]
                 (cond
                   absent?
                     #js [(date-dd-mm date)
                          0
                          "color: red"
                          (str (date-str date)
                               "\nSeu aluno faltou nesse dia")
                          "Falta"
                          (on-saturday date week-volume 0)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "blue"
                                           "lightblue"))
                          (on-saturday date "Volume semanal" nil)
                          ]
                   (and (not (nil? session-idx)) (nth sessions session-idx false))
                     #js [(date-dd-mm date)
                          (session-idx->volume session-idx)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "#3bbcb7"
                                           "#b3e5e3"))
                          (str (date-str date)
                               "\nSessão: " (inc session-idx)
                               "\nVolume: " (session-idx->volume session-idx))
                          nil
                          (on-saturday date week-volume 0)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "blue"
                                           "lightblue"))
                          (on-saturday date "Volume semanal" nil)]
                   :else #js [(date-dd-mm date) 0 "" "" ""
                              (on-saturday date week-volume 0)
                              (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                               "blue"
                                               "lightblue"))
                              (on-saturday date "Volume semanal" nil)]))]
    (->> some-days
         (map row-fn)
         (cons #js ["Data"
                    "Volume ou falta"
                    #js {:role "style"}
                    #js {:role "tooltip"}
                    #js {:role "annotation"}
                    "Volume semanal"
                    #js {:role "style"}
                    #js {:role "annotation"}
                    ])
         into-array)))

(defn days-difference [start end]
  (-> (tick/new-interval (tick/date end) (tick/date start))
      (tick/divide (tick/new-duration 1 :days))
      count
      dec))

(defcard-rg Calendário
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"
                     :paddingBottom 20}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
            (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                  (first @(re-frame/subscribe  [::app-state/calendar-selection])))))
            (str (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                       (first @(re-frame/subscribe  [::app-state/calendar-selection])))))
                 " - "
                 (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                       (dec (second @(re-frame/subscribe  [::app-state/calendar-selection]))))))))
          " "
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :disabled (= (count @(re-frame/subscribe [::app-state/calendar]))
                         @chart-zoom)
            :onClick #(swap! chart-zoom inc)
            :color "secondary"}
           [:> material-icons-search]
           "-"]
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :disabled (= 1 @chart-zoom)
            :onClick #(swap! chart-zoom dec)
            :color "secondary"}
           [:> material-icons-search]
           "+"]
          " "
          [:> material-Button
           {:variant "contained"
            :color (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
                     "default"
                     "primary")
            :onClick #(re-frame/dispatch [::events/toggle-multiple-calendar-selection])}
           "Selecionar múltiplos dias"]]
         (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
           [:> material-slider
            {:min 0
             :max (count @(re-frame/subscribe [::app-state/calendar]))
             :value (first @(re-frame/subscribe  [::app-state/calendar-selection]))
             :marks [{:value (days-difference app-state/today @(re-frame/subscribe [::app-state/first-calendar-day]))
                      :label "Hoje"}]
             :onChange #(re-frame/dispatch [::events/reset-calendar-selection [%2 (inc %2)]])}]
           [:> material-slider
            {:min 0
             :max (count @(re-frame/subscribe [::app-state/calendar]))
             :value @(re-frame/subscribe  [::app-state/calendar-selection])
             :onChange #(re-frame/dispatch [::events/reset-calendar-selection %2])}])
         [:h3
          "Próxima sessão do aluno: "
          (inc (:session-idx
                 (util/first-filter #(tick/>= (tick/date (:date %))
                                              (tick/date app-state/today))
                                    (filter :session-idx
                                            @(re-frame/subscribe
                                               [::app-state/calendar])))))]
         [:div#calendar-chart
          {:style #js {:padding "10px" :height 200}}]
         ;; Hack to be able to run the draw-chart fn
         ;; do not use it in production, use the event DOMContentLoaded instead
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "calendar-chart"
                                     (calendar-chart-data @(re-frame/subscribe [::app-state/calendar])
                                                          @(re-frame/subscribe [::app-state/sessions]))
                                     0.9
                                     calendar-chart-options)}]
         [:div
          {:style #js {:display "flex"
                       :justifyContent "center"}}
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-calendar-sel-left])}
           [:> chevron-left]
           "Mover"]
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-calendar-sel-right])}
           "Mover"
           [:> chevron-right]]]
         [:> form-control-label
          {:control (reagent/as-element
                      [:> material-checkbox
                       {:checked @(re-frame/subscribe [::app-state/absent?])
                        :onChange #(re-frame/dispatch
                                     [::events/toggled-absent
                                      (-> % .-target .-checked)]) } ])
           :label "Meu aluno faltou nesse dia"}]]]]))
  {:hidden? (reagent/atom false)})

(defcard-rg por-que-periodizar
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"
                     :padding "20px 0"}}
        [:h2 {:style #js {:textAlign "center"
                          :margin "20px 0 10px 0"}}
         "Por que periodizar?"]
        (if @hidden?
          [:> material-icons-ExpandMore
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :border-radius "7px"}}]
          [:> material-icons-ExpandLess
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :border-radius "7px"}}])]
       [:div.card-container
        {:style #js {:paddingBottom 20}}
        [:div.component-container
         {:hidden @hidden?}
         [:p {:style #js {:textAlign "justify"
                          :margin "10px"
                          :textIndent "30px"}}
          "A periodização surge como uma forma de facilitar e tornar mais eficaz a organização de um programa de treinamento, adequando cada fase e suas variáveis, para alcançar os objetivos do indivíduo, seja ele um atleta ou não. Esse sistema se ajusta à necessidade do treinamento e de suas variáveis, potencializando o resultado. Por conseguinte, melhores resultados são obtidos devido à organização da variedade de métodos existentes, pela implementação estratégica das fases e das cargas específicas, causando alternância nos estímulos. Um exemplo prático é a estabilização dos processos hipertróficos observados após quatro a cinco meses de treinamento quando são utilizadas cargas fixas, três séries de 10 repetições máximas (RM) durante todo o período. Na periodização, o aluno iniciante de academia pode ser submetido a uma carga de hipertrofia por quatro semanas, 3 séries de 12-14RM, seguido de mais quatro semanas com outra carga de hipertrofia em outra intensidade, por exemplo, 3 séries de 8-10RM. Em suma, o praticante treinará para atingir seus objetivos, porém com cargas variadas durante o seu ciclo semestral ou anual, sem esquecer que os ciclos (tempo em que a carga será realizada) devem ser respeitados. Enfim, periodizar não se trata apenas de modificar as variáveis do treinamento de maneira aleatória, mas sim de respeitar as modificações de acordo com os ciclos programados."]
         [:p {:style #js {:textAlign "justify"
                          :textIndent "30px"
                          :margin "10px"}}
          "Vale ressaltar que a periodização não é um conceito rígido, podendo ser aplicado às mais variadas populações, como atletas de diversas modalidades, indivíduos ativos e/ou sedentários, desde que sejam considerados os diferentes compromissos pessoais e profissionais. No caso dos praticantes de treinamento de força em academias e alunos de treinamento personalizado, os objetivos podem ser: ganhos de aptidão física voltada à saúde, emagrecimento, aumento de força, resistência, flexibilidade, aumento da massa magra, entre outros."]
         [:p {:style #js {:textAlign "justify"
                          :textIndent "30px"
                          :margin "10px"}}
          "Na comparação entre programas periodizados e não periodizados, foi demonstrada a superioridade do treinamento periodizado no aumento de força muscular. De fato, estudos que compararam treinamentos de força periodizados com não periodizados evidenciaram que a periodização foi mais eficiente em promover alterações positivas nos componentes da composição corporal e da força máxima. Programas não periodizados com cargas fixas também promovem alterações positivas na composição corporal e na força, porém, por períodos limitados, até quatro a cinco meses. Desse modo, periodizar auxilia no processo de melhora das capacidades funcionais por períodos superiores a seis meses."]
         [:p {:style #js {:textAlign "justify"
                          :textIndent "30px"
                          :margin "10px"}}
          "Os programas de treinamento de força periodizados com variação da intensidade e períodos ativos de descanso podem atenuar a estabilização dos resultados no desempenho, diminuindo a probabilidade de sobretreinamento e proporcionando maiores aumentos na força e na potência."]
         [:p {:style #js {:textAlign "justify"
                          :textIndent "30px"
                          :margin "10px"}}
          "Os objetivos da periodização incluem maximizar o princípio da sobrecarga e garantir uma melhor relação entre estresse e recuperação (heterocronismo). O princípio da sobrecarga pode ser descrito pelo processo de aplicação de cargas às quais o sistema neuromuscular não está adaptado. Quando maiores demandas são impostas ao sistema neuromuscular, ocorrem adaptações que resultam em níveis aumentados de força. As variáveis do treinamento que podem ser articuladas para aperfeiçoar o programa são: número de séries realizadas em cada exercício, número de repetições por série, exercícios realizados, número de exercícios realizados a cada sessão, períodos de descanso entre as séries e exercícios, carga utilizada a cada série, tipo e velocidade da ação muscular utilizada (concêntrica, excêntrica, isométrica), número de sessões de treinamento realizadas por dia e por semana. Conforme comentado anteriormente, o treinamento de força em academias também requer a organização em ciclos, nos quais as suas variáveis são sistematizadas."]
         [:p
          {:style #js {:textAlign "right"
                       :margin "10px"}}
          [:a {:href "https://books.google.com.br/books?id=r2aJDAAAQBAJ"}
          "Prestes, Jonato, et al. \"Prescrição e periodização do treinamento de força em academias.\" (2010)."
          ]]
        ]]]))
  {:hidden? (reagent/atom false)}
  {:frame true
   :heading false})
